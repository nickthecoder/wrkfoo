Current Task
============

Stop using HidingSplitPane focus left/right, and instead have ToolPanel handle all focusing

ToolPanel, maybe I should add a focus listener which focus to the next component.

Editor used to have a WindowFocusListener which focused on the editor's textpane.
    Hmmm.

Editor Find then Escape does nothing.

Later ResultsPanel should not BE a JComponent, but instead HAVE a JComponent with getComponent method
    So that ResultsPanel can be a composite of more than one type of results.
    For example, a table plus header/footer information will have a JSplitPane, where the
        contents are the getComponent of the two wrapped ResultsPanels.

Next Tasks
==========

PriorityDoc to allow diagrams with classes from other prjects
    Then add ParametersPanel, linking with just ToolPanel

Clean up stuff surrounding ResultsPanel
    Tool should be able to getResultsPanel for example.
    Should be simple to focus on the "right" component of the results panel.

Results to have their own parameters
    Example, List of Options plus an the "if" statement
    Listen to all parameters convenience method (maybe put that on Task too).
        Does GroupParameter listen to all of its children?
    Use a normal splitpane?
    Parameters can be disabled.

Copy and Move and Link files using drag and drop
    Tabs can be a drop target for files if they are a directory
        Rename the DirectoryTool interface to HasDirectory and put in jGuifier?

    A FileSetTool, where files can be dragged for further processing
    A TrashTool ? where files can be dragged to?

PlacesTool to allow drag and drop from other PlacesTool - copies the file AND label

gkt places file can contain http:// etc, so PlacesTool will screw them up when editing.
    Allow for all protocols, and handle non-file ones gracefully
    
Some kind of split screen, allowing two tools side by side for easy drag and drop

Edit Settings - a Task (not a Tool), where each of the Resources attributes are represented as a Parameter
    But maybe this Task should be in its own tab, and therefore we need a TaskTool, where the results pane
        is ALWAYS hidden, and we only see the parameters
        "Go" is replaced by "OK", or maybe the updates happen without the need for "OK"
    TaskTool has a "goLabel" attribute, if null, then the Go button is not visible.

BUGS
====

Add an option does not make it available until a restart

Git Status is not focusing on the non-row option when empty only when running from command line.

Terminal does not output anything for short-lived commands (such as a simple "ls").

Editor toolbar appears when tabset is loaded, even though it isn't on the selected tab.
    It is the (lack of) change event from TabbedPane?

New Features
============

Drop targets can implement a new interface which allows them to give feedback when a drop
    may happen. At the moment I am adding/removing a border, but that won't be applicable
    some cases. Tabs may be drop targets, in which case they should just change color?

Include IF
    Only use the included options IF the scriptlet returns true
    Use this for Places, where SOME of the places are files, but other aren't.
    Can also use it to include directory.json from file.json
    No. The IF should be part of the options file, not part of the include

Places to accept Drag and Drop files.

A window to have a current directory, then basic git/gradle commands can be a GLOBAL.
    Make it more generic, allow for any number of named values that the groovy scripts can use.
        Put them in a single map
    Choose the type, String, File, Integer etc, plus Groovy Eval - run a Groovy script to get the value.

Git stash features
	http://stackoverflow.com/questions/1105253/how-would-i-extract-a-single-file-or-changes-to-a-file-from-a-git-stash

    Then maybe implement a compound Tool "Git", which has a GitStatus AND a GitStash
    Later have other Git lists, such as branches, tags.
    Or just reply on shortcuts to switch between different Git tools, e.g. alt+s for git status, alt+b for git branches etc.

Non-row options to have shortcuts

Editor doesn't offer "Close without saving" when closing the tab or opening a different document.

Editor doesn't detect when the file has changed on disk.

Editor saveAs , rename

Settings Task to edit the Settings data
	Settings to show/hide toolbars. Either toolbar,statusbar or hide.
	Use EnumParameter
		EnumParameter to format the labels cleverly FOO -> Foo, FOO_BAR -> Foo Bar
	Settings to show/hide each tool bar item
		Put them into GroupParameters - a good way to force me to get this right!

Terminal to have shortcuts so that it is easy to move away from the Terminal using the keyboard.
    trolCommander creates a subclass of JediTermWidget which creates its own subclass of TerminalPane,
    and this TerminalPane has its own actions with shortcuts.

Tools to have a "Help" link in the parameters pane. Click to show the web page.
    
Nice-to-Haves
=============

History to store the long title, and show it in a popup menu to Jump to a distance moment.

Image Manipulation
    Using ImageMagik
    Create options for creating thumbnails and larger, but scaled down versions of photos.
    Create options to convert from one format to another
    Create a Tool, which includes an image preview, which takes an image
        and lets you scale and crop
        Save using a new "Save" component, which is RISC-OS style draggable icon + name text field
            + ComboBox for the file extension

Music player
    Split view with PlayList and Browse as two lists
    Browse options for "play now", "queue". Includes file.json
    Playlist "." for play now "-" for remove
        Drag and drop to re-order

Video Series Player
    List of "Series"
        "." will launch the video, and move onto the next item in the directory
    Drag a directory / video file onto the list to add to the "Up-Next" list

TextEditorParameter, for editing chunks of code (such as groovy scripts, xml, json etc)
    Right click on the "plain" JTextPane for a "Edit..." option, which pops up an EditorWindow
    Share the same document between the Parameter's component and the EditorWidget, so changes
      appear in both.

action and ifScript to use Editor
	default to 3 or 4 lines JTextArea, but with a button to popup a full editor.
	EditorPane interacts with new EditorWindow instead of Editor.
    EditorWindow and MainWindow both implement TopLevel, which has toolbar hooks.
    Keep MainWindow.getMainWindow, but also have TopLevel.getTopLevel()
    TopLevel.getFrame() returns the JFrame.

Un-close tab. Useful when you close a tab by mistake. (shift+ctrl+T)

Save Tab sets to remember the order and widths of the columns
    Only possible with regular TableTools, not with future compound tools, such as the planned trolCommaner-like tools.

Filtering table results. See : https://docs.oracle.com/javase/tutorial/uiswing/components/table.html

Undecided
=========

Would like to launch a browser window for javadocs from the gitstatus Tool
	Plus run the rsync and launch the published version too (specific to my setup).
		Put this in a "Custom" place (see below)

Later Features
==============
The following features may taks some time, for little benefit, so don't have a high priority.

TabbedTool
	A tool, which has TWO or more tasks, and therefore many results.
	Useful when one item is made up of two different types of list.
	e.g. A wiki page has a set of versions, a set of back links, a set of forward links etc.
		So the WrkWikiPage, will have multiple tabs.

Custom options applied to a tool
	e.g. WrkF is given more options, suitable only for images.
	Problem : For this to be useful, it needs to be added to the History, and saved in the tabset. Nasty.
    Can we create a WrappedTool, which has the names of additional option file(s).
    Maybe just create a subclass of WrkF for images, which sets the fileExtension filter,
        and has its own options file which includes the wrkf's options file.

Look at trolCommander to see what I can pinch from it???
    http://trolsoft.ru/en/soft/trolcommander

Editor to have syntax highlighter choice, which is guessed based on extension when file is changed.

Allow slow running tasks to update their results periodically.
	Maybe a new updatePartialResults method???
		But then updateResults will get called at then end, invalidating the whole table. Hmm.

Tree commands
	Rewrite wrkftree using a JTree, which gets more results when directories are opened. 

Implement drag and drop across the commands
		Drag a file to "Places", and it will append it to its places file.
		Copy / Move files

FileParameters to have an icon?, which can be dropped onto a directory, which will set the dir name.

Much Later
==========

	ncurses option, so that wrkfoo can work quickly over ssh.
		Tools and Tasks don't interact with Swing, and this was a deliberate design decision, so that an ncurses-like
		frontend could be developed.
