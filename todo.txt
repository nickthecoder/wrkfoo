Current Task
============

BUGS
====

Double click when there is no default option throws an exception

WrkOptions not updating the list when adding/deleting options.

Using an invalide option doesn't give a message

Editor toolbar appears when tabset is loaded, even though it isn't on the selected tab.
	Shouldn't have a list of tools passed to MainFrame constructor.
	Probably MainWindow.getMainWindow(component) is returning null

Editor doesn't offer "Close without saving" when closing the tab or opening a different document.

Editor->ctrl+O doens't focus on the file parameter

ExecTool break the convension of being defined by tool's class and parameters
	Doesn't have a non-arg constructor, so loading the tab will fail.
	Also consider re-runnable when loading/saving. Just ignore non-rerunnable when saving.
	Need a "builder"

Tabs lose their properites when dragged to a different MainWindow.

When Editor dirty changes the tab's label, the window title isn't correctly set. (Misses the "WrkFoo : " prefix)

New Features
============

Options to have a new "prompt" attribute, similar to "newTab" option.
	Works for Tools and Tasks

	F4 to prompt tasks/tools.
		Pass into Option.run in the same was as newTab currently is.
		
	Refactor the running of options in to a new class, as it is getting complex, and shouldn't be in AbstractTableTool

action and ifScript to use Editor
	default to 3/4 lines JTextArea, but with a button to popup a full editor.
	EditorPane interacts with new EditorWindow instead of Editor.
	Maybe rename Editor to EditorTool.

Create a code line count Task in groovy to demonstrate a user defined task
	Can count a single file, or recurse a whole tree.
	Place it in .config/wrkfoo/tasks directory? (No. When Tasks are groovyfied, then it makes sense to keep them together).
		So, put them in ~/bin
	We need to define a PATH to search for groovy code. (Resources)
	Option to show total or individual count for each file.
	
	Then create a Tool written in Groovy, which takes the individual count lines, and produces a Table (using WrappedFile).
		The groovy task can have a "main", which creates a MainWindow for the tool when run directly from the command line.
	It is going to be common for a Task to produce plain text AND OO results (e.g. FileLister)
		Is there a good way to do both in one class?
			Could ALWAYS create OO results, and then use toString on the row to produce the plain text results.


OptionData doesn't handle aliases
	WrkOptions needs a new column. Hide it and make it the tooltip for the code column.

Add "description" to Option?


Would like to launch a browser window for javadocs from the gitstatus Tool
	Plus run the rsync and launch the published version too (specific to my setup).
		Put this in a "Custom" place (see below)

Resources to have only ONE "globals", rather than a list, which is hard-coded to the name "globals" (once OPTIONS_PATH) has been implmented.
	WrkOptions to have a "showGlobals" parameter.
	And/or a "Wrk Global Options" global option "ego" (as "eo" is "Edit Options")

Editor saveAs changes the file to getParent then does check() to force parameter to appear?
	Nah, just run a saveAs Task.
	Fire a change event so Editor can change the parameter accordingly

Exec runWhenCompleted( Runnable )


Settings Task to edit the Settings data
	Settings to show/hide toolbars. Either toolbar,statusbar or hide.
	Use EnumParameter
		EnumParameter to format the labels cleverly FOO -> Foo, FOO_BAR -> Foo Bar
	Settings to show/hide each tool bar item
		Put them into GroupParameters - a good way to force me to get this right!
	
Non-row option field in the status bar
	Settings allow the toolbars to be shown/hidden
		Non-row option field, Regular toolbar, Editor toolbar
	Global option to show the Settings Task.

MegaTabSet aka TabGroups
	Tabs down the left edge, or a pulldown list in the toolbar
	Each MegaTab has its own tabset (and must know the filename of the tabset).
	This way, I can have multiple projects in a single window.
	Ensure tab shortcuts are applied to the tabbedpane, so that they still work when a shortcut is shared by tabs in different mega-tabs.

Un-close tab. Useful when you close a tab by mistake.

Save Tab sets to remember the order and widths of the columns

Editor to prompt when closing the tab without saving (if dirty)

Embed a terminal emulator :
	https://github.com/JetBrains/jediterm/tree/master/terminal/src/com/jediterm/terminal

Add/Edit/New/Copy options doesn't support aliases. (Needs Multi-value parameter).
	Add another column.

TabbedTool
	A tool, which has TWO or more tasks, and therefore many results.
	Useful when one item is made up of two different types of list.
	e.g. A wiki page has a set of versions, a set of back links, a set of forward links etc.
		So the WrkWikiPage, will have multiple tabs.
	
Popup Menu items :
	Merge the different options files together and sort by their code??? by Label???
	Maybe make the top-level ones bold (if that is possible).
		Global options aren't bold, but included ones are?
		Use background colors? Could specify a bg colour for each options file.
		Special menuitemfilter e.g. "*" to show everything, but it usually excludes globals. "-" to only show top level options.

RegexParameter - add popup-menu for oft used constructs, such as quote, whitespace, one or more, zero of more, identifier...
	Should grep then use RegexParameter?

Custom options applied to a tool
	e.g. WrkF is given more options, suitable only for images.
	Problem : For this to be useful, it needs to be added to the History, and saved in the tabset. Nasty.

Allow additional packages to be imported from the settings.json into GroovyScriptlet

Code review & Javadoc comments

Later Features
==============


Editor to have syntax highlighter choice, which is guessed based on extension when file is changed.

Allow slow running tasks to update their results periodically.
	Maybe a new updatePartialResults method???
		But then updateResults will get called at then end, invalidating the whole table. Hmm.


Tree commands
	Rewrite wrkftree using a JTree, which gets more results when directories are opened. 

Filtering table results. See : https://docs.oracle.com/javase/tutorial/uiswing/components/table.html

Implement drag and drop across the commands
		Drag a file to "Places", and it will append it to its places file.
		Copy / Move files

FileParameters to have an icon?, which can be dropped onto a directory, which will set the dir name.

Much Later
==========

	ncurses option, so that wrkfoo can work quickly over ssh.
		Tools and Tasks don't interact with Swing, and this was a deliberate design decision, so that an ncurses-like
		frontend could be developed.

Unresolved bugs
===============
	